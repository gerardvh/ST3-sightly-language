%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
# For Sightly grammar reference, see: 
# https://github.com/Adobe-Marketing-Cloud/htl-spec/blob/master/SPECIFICATION.md#1-expression-language-syntax-and-semantics
file_extensions:
  - html
  - sightly.html
scope: text.html.sightly

variables:
  identifier: '[A-Za-z_][A-Za-z_0-9:]*'
  validField: '[A-Za-z_0-9:]*'
  hexDigit: '[a-fA-F0-9]'
  stringRegex: ("|')((?:\\\1|(?:(?!\1).))*)\1
  atomRegex: (?:("|')((?:\\\1|(?:(?!\1).))*)\1)|{{identifier}}
  exponentRegex: '[eE][+-]?[0-9]+'
  slyBlocks: (use|text|attribute|element|test|list|repeat|include|resource|template|call|unwrap)
  ws: (?:\s*)

contexts:
  main:
    # Embedded in HTML, so use that syntax until we get to a Sightly Expression Block
    - match: ''
      push: 'scope:text.html.basic'
      with_prototype:
        - include: sightly-comment
        - include: sightly-expression
        - include: sightly-data-blocks

  # ------------- Basic Language details ---------------- #
  sightly-comment:
    - match: '<!--/\*'
      scope: punctuation.definition.comment.block.begin.sightly
      push:
        - meta_content_scope: comment.block.sightly
        - match: '\*/-->'
          scope: punctuation.definition.comment.block.end.sightly
          pop: true

  sightly-expression:
    - match: '(\$){'
      scope: punctuation.section.embedded.begin.sightly
      captures:
        1: punctuation.definition.keyword.sightly keyword.operator.embedded.sightly
      push: 
      - meta_scope: source.sightly.embedded.html meta.block.sightly
      - clear_scopes: true
      - match: '}'
        scope: punctuation.section.embedded.end.sightly
        pop: true
      - include: expression-node
      - match: '@'
        scope: punctuation.definition.keyword.sightly keyword.operator.optionList.sightly
        push: option-list

  sightly-data-blocks:
    - match: '(?:^|\s+)((?=data-sly-{{slyBlocks}}))'
      captures:
        1: meta.attribute-with-value.html.sightly
        2: entity.other.attribute-name.html.sightly
      push:
        - meta_scope: meta.data-sly-block.sightly
        - match: '(data-sly-{{slyBlocks}})(\.?)({{identifier}})?'
          captures:
            1: entity.other.attribute-name.html.sightly support.function.sightly
            2: support.function.sightly
            3: keyword.operator.accessor.html.sightly
            4: entity.name.function.sightly
        - match: \=
          scope: punctuation.separator.key-value.html
        - include: strings-with-sightly-allowed
        - match: ''
          pop: true
  
  strings-with-sightly-allowed:
    - match: '"'
      scope: punctuation.definition.string.begin.html
      set:
        - meta_scope: meta.attribute-with-value.html string.quoted.double.html
        - match: '"'
          scope: punctuation.definition.string.end.html
          pop: true
        - include: attribute-entities
        - include: sightly-expression
    - match: "'"
      scope: punctuation.definition.string.begin.html
      set:
        - meta_scope: meta.attribute-with-value.html string.quoted.single.html
        - match: "'"
          scope: punctuation.definition.string.end.html
          pop: true
        - include: attribute-entities
        - include: sightly-expression

  entities-common:
    - match: "(&)([a-zA-Z0-9]+|#[0-9]+|#x[0-9a-fA-F]+)(;)"
      scope: constant.character.entity.html
      captures:
        1: punctuation.definition.entity.html
        3: punctuation.definition.entity.html

  attribute-entities:
    - include: entities-common
  
  sightly-expression-before-end:
    - match: '(?=})'
      pop: true

  option-list:
    - meta_scope: source.sightly.embedded.html meta.block.sightly meta.option-list.sightly 
    - clear_scopes: true
    - include: sightly-expression-before-end
    - include: option

  option:
    - match: '({{identifier}}){{ws}}(?=\=)'
      captures:
        1: meta.option.identifier.sightly variable.function.option.sightly
    - match: ','
      scope: punctuation.separator.sightly
    - include: localization
    - match: \=
      scope: keyword.operator.assignment.sightly
      push: option-values
    # Optional '=' with a non-optional `option-values` following
  
  option-values:
    - meta_scope: meta.option.value.sightly
    - match: (?=,)
      pop: true
    - include: sightly-expression-before-end
    - include: expression-node
    - include: value-list
    # includes an `expression-node`  or '[' `value-list` ']'
  
  value-list:
    - match: \[
      scope: punctuation.section.brackets.begin.sightly
      push:
        - meta_scope: meta.brackets.sightly meta.value-list.sightly
        - match: \]
          scope: punctuation.section.brackets.end.sightly
          pop: true
        - include: expression-node
    # `expression-node` with optional ',' and more `expression-nodes`
  
  expression-node:
    - include: property-access
    - include: atom
    - include: operators
    - include: term
    # binaryOp , '?' , binaryOp , ws , ' : ' , ws , binaryOp | binaryOp
  
  operators:
    - match: '&&|\|\||!'
      scope: keyword.operator.logical.sightly
    - match: '[=!<>]='
      scope: keyword.operator.comparison.sightly
    - match: \s\?\s
      scope: keyword.operator.ternary.conditional.sightly
    - match: \s\:\s # TODO: make this invalid if there is not a preceding `?`
      scope: keyword.operator.ternary.after-conditional.sightly
      # Possible TODO: add ';' ',' '%' etc. for formatting operators.
  
  term:
    - match: '\('
      scope: punctuation.group.begin.sightly
      push:
        - meta_scope: meta.expression-group.sightly
        - match: \)
          scope: punctuation.group.end.sightly
          pop: true
        - include: expression-node
    # `property-access` | '(', `expression-node`, ')'

  property-access:
    - match: '(\.)({{validField}})'
      captures:
        1: keyword.accessor.sightly
        2: variable.other.member.sightly variable.parameter.sightly
    - match: '({{identifier}})(\[)'
      captures:
        1: variable.other.identifier.sightly
        2: punctuation.brackets.member-access.begin.sightly
      push:
        - match: \]
          scope: punctuation.brackets.member-access.end.sightly
          pop: true
        - include: strings
        - include: integer
        - match: '{{identifier}}'
          scope: variable.parameter.member-access.sightly
    # `atom` { '.' `field` }
  
  atom:
    - include: strings
    - include: numbers
    - include: bool
    - match: '{{identifier}}'
      scope: variable.other.identifier.sightly
    # `string` | `identifier` | `int` | `float` | `bool`
  
  bool:
    - match: 'true|false'
      scope: constant.language.boolean.sightly
    # 'true' | 'false'

  numbers:
    - include: float
    - include: integer
    # int:
    ## ('1'..'9'){'0'..'9'} | '0'
    # float:
    ## ('0'..'9'){'0'..'9'} '.' {'0'..'9'} [exponent] : 12.45 or 12.89e-9
    ## | '.' ('0'..'9'){'0'..'9'} [exponent] : .12231 or .12E+9 
    ## | ('0'..'9'){'0'..'9'} exponent

  integer:
    - match: \b\d+\b
      scope: constant.numeric.integer.sightly

  float:
    - match: \b\d+\.\d+({{exponentRegex}})?\b
      scope: constant.numeric.float.sightly
    - match: \b\d+{{exponentRegex}}\b
      scope: constant.numeric.float.sightly

  strings:
    - include: string-quoted-single
    - include: string-quoted-double

  string-quoted-single:
    - match: "'"
      scope: punctuation.definition.string.begin.sightly
      push:
        - meta_scope: string.quoted.single.sightly
        - match: "'"
          scope: punctuation.definition.string.end.sightly
          pop: true
        - include: escape-sequences

  string-quoted-double:
    - match: '"'
      scope: punctuation.definition.string.begin.sightly
      push:
        - meta_scope: string.quoted.double.sightly
        - match: '"'
          scope: punctuation.definition.string.end.sightly
          pop: true
        - include: escape-sequences

  escape-sequences:
    - include: character-escape
    - include: unicode-escape
    - include: octal-escape
  
  character-escape:
    - match: \\[abtnfr\"\\']
      scope: constant.character.escape.sightly

  unicode-escape:
    - match: '\\u[a-fA-F0-9]{4}'
      scope: constant.character.escape.unicode.sightly
  
  octal-escape:
    - match: \\[0-3][0-7][0-7]
      scope: constant.character.escape.octal.sightly
    - match: \\[0-7][0-7]?
      scope: constant.character.escape.octal.sightly

  # ------------------ Built in expression options ------------------ #
  # Display context (snippet)
  # 
  # Format
  ## - Strings (snippet)
  ## - Dates (snippet)
  ## - Numbers (snippet)
  # 
  # i18n
  # 
  localization:
    - match: 'i18n'
      scope: constant.language.localization.sightly

  # Array Join
  # 
  # TODO: URI Manipulation
  
  # ----------------- TODO: Block Statements ----------------------- #
  # 
  # TODO: Use
  # 
  # TODO: Text
  # 
  # TODO: Attribute
  # 
  # TODO: Element
  # 
  # TODO: Test
  # 
  # TODO: List
  # 
  # TODO: Repeat
  # 
  # TODO: Include
  # 
  # TODO: Resource
  # 
  # TODO: Template
  # 
  # TODO: Call (Template)
  # 
  # TODO: Unwrap
