%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
# For Sightly grammar reference, see: 
# https://github.com/Adobe-Marketing-Cloud/htl-spec/blob/master/SPECIFICATION.md#1-expression-language-syntax-and-semantics
file_extensions:
  - html
  - sightly.html
scope: text.html.sightly

variables:
  identifier: '[A-Za-z_][A-Za-z_0-9:]*'
  validField: '[A-Za-z_0-9:]*'
  hexDigit: '[a-fA-F0-9]'
  stringRegex: ("|')((?:\\\1|(?:(?!\1).))*)\1
  atomRegex: (?:("|')((?:\\\1|(?:(?!\1).))*)\1)|{{identifier}}
  exponentRegex: '[eE][+-]?[0-9]+'

contexts:
  main:
    # Embedded in HTML, so use that syntax until we get to a Sightly Expression Block
    - match: ''
      push: 'scope:text.html.basic'
      with_prototype:
        - match: '<!--/\*'
          scope: punctuation.definition.comment.sightly
          push:
            - meta_scope: comment.block.sightly
            - match: '\*/-->'
              pop: true
        - match: '(\$){'
          scope: punctuation.section.embedded.begin.sightly
          captures:
            1: keyword.operator.embedded.sightly
          push: sightly-expression

  sightly-expression:
    - meta_scope: source.sightly.embedded.html meta.block.sightly
    - clear_scopes: true
    - include: sightly-expression-end
    - include: expression-node
    - match: '@'
      scope: keyword.operator.optionList.sightly
      set: option-list

  sightly-expression-end:
    - match: '}'
      scope: punctuation.section.embedded.end.sightly
      pop: true

  option-list:
    - meta_scope: todo
    - clear_scopes: true
    - include: sightly-expression-end
    - include: option
    - include: option-values

  option:
    - match: '{{identifier}}'
      scope: meta.option.identifier.sightly
    - match: ','
      scope: punctuation.separator.sightly
    - match: \=
      scope: keyword.operator.assignment.sightly
      # push:
      #   - meta_scope: meta.option-values.sightly
      #   - include: sightly-expression-end
    # Optional '=' with a non-optional `option-values` following
  
  option-values:
    - meta_scope: meta.option-values.sightly
    - match: ','
      scope: punctuation.separator.sightly
      pop: true
    - include: expression-node
    - include: value-list
    # includes an `expression-node`  or '[' `value-list` ']'
  
  value-list:
    - match: \[
      push:
        - meta_scope: meta.value-list.sightly
        - match: \]
          pop: true
        - include: expression-node
    # `expression-node` with optional ',' and more `expression-nodes`
  
  expression-node:
    - meta_scope: todo
    - include: atom
    - include: property-access
    - include: operators
    - include: term
    # - match: 
    # binaryOp , '?' , binaryOp , ws , ' : ' , ws , binaryOp | binaryOp
  
  binary-op:
    - meta_scope: todo
    # factor { , operator , factor}
  
  operators:
    - match: '&&|\|\||!'
      scope: keyword.operator.logical.sightly
    - match: '[=!<>]='
      scope: keyword.operator.comparison.sightly
      # Possible TODO: add ';' ',' '%' etc. for formatting operators.

  factor:
    - meta_scope: todo
    # 'term' | '!' , 'term'
  
  term:
    - meta_scope: todo
    - match: '\('
      scope: punctuation.group.begin.sightly
      push:
        - meta_scope: meta.expression-group.sightly
        - match: \)
          scope: punctuation.group.end.sightly
          pop: true
        - include: expression-node

    # `property-access` | '(', `expression-node`, ')'
    
  property-access:
    - match: '(\.)({{validField}})'
      captures:
        1: keyword.accessor.sightly
        2: variable.other.member.sightly todo
    # `atom` { '.' `field` }
  
  atom:
    - include: strings
    - include: numbers
    - include: bool
    - match: '{{identifier}}'
      scope: todo meta.identifier.sightly
    # `string` | `identifier` | `int` | `float` | `bool`
  
  bool:
    - match: 'true|false'
      scope: constant.language.boolean.sightly
    # 'true' | 'false'

  numbers:
    - match: \b\d*\.?\d+({{exponentRegex}})?\b
      scope: constant.numeric.float.sightly
    - match: \b\d\b
      scope: constant.numeric.integer.sightly
    # int:
    ## ('1'..'9'){'0'..'9'} | '0'
    # float:
    ## ('0'..'9'){'0'..'9'} '.' {'0'..'9'} [exponent] : 12.45 or 12.89e-9
    ## | '.' ('0'..'9'){'0'..'9'} [exponent] : .12231 or .12E+9 
    ## | ('0'..'9'){'0'..'9'} exponent

  strings:
    - include: string-quoted-single
    - include: string-quoted-double

  string-quoted-single:
    - match: "'"
      scope: punctuation.definition.string.begin.sightly
      push:
        - meta_scope: string.quoted.single.sightly
        - match: "'"
          scope: punctuation.definition.string.end.sightly
          pop: true
        - include: escape-sequences

  string-quoted-double:
    - match: '"'
      scope: punctuation.definition.string.begin.sightly
      push:
        - meta_scope: string.quoted.double.sightly
        - match: '"'
          scope: punctuation.definition.string.end.sightly
          pop: true
        - include: escape-sequences

  escape-sequence:
    - match: \\[abtnfr\"\'\\]
      scope: constant.character.escape.sightly
    - include: unicode-escape
    - include: octal-escape
  
  unicode-escape:
    - match: '\\u[a-fA-F0-9]{4}'
      scope: constant.character.escape.unicode.sightly
  
  octal-escape:
    - match: \\[0-3][0-7][0-7]
      scope: constant.character.escape.octal.sightly
    - match: \\[0-7][0-7]?
      scope: constant.character.escape.octal.sightly






# ########################################################################
    # 
    # 
    # 
  sightly:
    - meta_scope: source.sightly.embedded.html meta.block.sightly
    - clear_scopes: true
    - match: '}'
      scope: punctuation.section.embedded.end.sightly
      pop: true
    - include: expression
    - match: '@'
      scope: keyword.operator.optionList.sightly
      set: optionList

  optionList:
    - meta_scope: source.sightly.embedded.html meta.block.sightly meta.optionList.sightly meta.function-call.sightly
    - clear_scopes: true
    - include: sightly
    - include: option
  
  # option:
  #   - match: ([a-zA-Z_]+[a-zA-Z0-9_-]*)
  #               \s?(=)\s?
  #                 (\w*)\s?
  #                   (?=,|}) # TODO: add 3rd capture for the optionValues
  #     captures:
  #       1: meta.option.key.sightly
  #       2: keyword.operator.assignment.sightly
  #       3: meta.option.value.sightly

  expression:
    - include: strings
    - include: propertyAccess
    - include: booleans
    - include: operators
    - include: numbers
    - include: punctuation

  # operators:
  #   - match: '&&|!|\|\|'
  #     scope: keyword.operator.logical.sightly
  #   - match: '='
  #     scope: keyword.operator.assignment.sightly
  #   # TODO: add ternary operators
    
  punctuation:
    - match: \(
      scope: punctuation.section.group.begin.sightly
      push:
        - meta_scope: meta.section.group.sightly
        - match: \)
          scope: punctuation.section.group.end.sightly
          pop: true
        - include: sightly
    - match: \)
      scope: invalid.punctuation.group.sightly

  propertyAccess:
    - match: '({{identifier}})(\.)({{validField}})'
      captures:
        1: variable.other.sightly 
        2: punctuation.accessor.sightly keyword.operator.navigation.sightly
        3: variable.other.member.sightly meta.property.object.sightly variable.function.sightly

  booleans:
    - match: 'true|false'
      scope: constant.language.boolean.sightly

  # numbers:
  #   - match: \d
  #     scope: constant.numeric.sightly

  exprNode:
    - meta_content_scope: meta.exprNode.sightly
    # Each part of an expression

  optionValues:
    - meta_content_scope: meta.optionList.optionValues.sightly
    # can include an `exprNode` or a `valueList`

  valueList:
    - meta_content_scope: meta.valueList.sightly
