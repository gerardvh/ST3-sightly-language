%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
# For Sightly grammar reference, see: 
# https://github.com/Adobe-Marketing-Cloud/htl-spec/blob/master/SPECIFICATION.md#1-expression-language-syntax-and-semantics
file_extensions:
  - html
  - sightly.html
scope: text.html.sightly

variables:
  validVariable: '[A-Za-z_][A-Za-z_0-9]*' # TODO: include `:` here as possible to use in a variable name?
  validField: '[A-Za-z_0-9]*'

contexts:
  main:
    # Embedded in HTML, so use that syntax until we get to a Sightly Expression Block
    - match: ''
      push: 'scope:text.html.basic'
      with_prototype:
        - match: '<!--/\*'
          scope: punctuation.definition.comment.sightly
          push:
            - meta_scope: comment.block.sightly
            - match: '\*/-->'
              pop: true
        - match: '(\$){'
          scope: punctuation.section.embedded.begin.sightly
          captures:
            1: keyword.operator.embedded.sightly
          push:
            - meta_scope: source.sightly.embedded.html meta.block.sightly
            - clear_scopes: true
            - include: sightly
            - match: '}'
              scope: punctuation.section.embedded.end.sightly
              pop: true

  sightly:
    - include: expression

  expression:
    - meta_scope: meta.block.sightly
    # - include: optionList
    - include: propertyAccess
    - include: booleans
    - include: operators
    - include: strings

  operators:
    - match: '&&|!|\|\||\?|:'
      scope: keyword.operator.logical.sightly
    - match: '@'
      scope: keyword.operator.optionList.sightly
    - match: '='
      scope: keyword.operator.assignment.sightly

  strings:
    - include: string-quoted-single
    - include: string-quoted-double

  string-quoted-single:
    - match: "'"
      scope: punctuation.definition.string.begin.sightly
      push:
        - meta_scope: string.quoted.single.sightly
        - match: "'"
          scope: punctuation.definition.string.end.sightly
          pop: true
        - include: escapeSequences

  string-quoted-double:
    - match: '"'
      scope: punctuation.definition.string.begin.sightly
      push:
        - meta_scope: string.quoted.double.sightly
        - match: '"'
          scope: punctuation.definition.string.end.sightly
          pop: true
        - include: escapeSequences

  escapeSequences:
    - match: '\\u[a-fA-F0-9]{4}'
      scope: constant.character.escape.unicode.sightly
    - match: \\.
      scope: constant.character.escape.sightly

  propertyAccess:
    - match: '({{validVariable}})(\.?)({{validField}})'
      captures:
        1: variable.other.constant.sightly 
        2: punctuation.accessor.sightly keyword.operator.navigation.sightly
        3: variable.other.member.sightly meta.property.object.sightly meta.function-call.sightly

  booleans:
    - match: 'true|false'
      scope: constant.language.boolean.sightly  

  exprNode:
    - meta_content_scope: meta.exprNode.sightly
    # Each part of an expression

  optionList:
    - match: \}
      pop: true
    - match: ([a-zA-Z_]+[a-zA-Z0-9_-]*)
                \s?(=)\s?
                  (.*\s?)
                    (?:,|\})? # TODO: add 3rd capture for the optionValues
      captures:
        1: meta.option.key.sightly
        2: keyword.operator.assignment.sightly
        3: meta.option.value.sightly

  optionValues:
    - meta_content_scope: meta.optionList.optionValues.sightly
    # can include an `exprNode` or a `valueList`

  valueList:
    - meta_content_scope: meta.valueList.sightly
