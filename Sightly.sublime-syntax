%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - sightly
scope: source.sightly

variables:
  validVariable: '[A-Za-z_][A-Za-z_0-9]*' # TODO: include `:` here as possible to use in a variable name?
  validField: '[A-Za-z_0-9]*'

contexts:
  main:
    - include: expression

  expression:
    - meta_scope: meta.block.sightly
    # - include: optionList
    - include: propertyAccess
    - include: booleans
    - include: operators
    - include: strings

  operators:
    - match: '&&|!|\|\||\?|:'
      scope: keyword.operator.logical.sightly
    - match: '@'
      scope: keyword.operator.optionList.sightly
    - match: '='
      scope: keyword.operator.assignment.sightly

  strings:
    - include: string-quoted-single
    - include: string-quoted-double

  string-quoted-single:
    - match: "'"
      scope: punctuation.definition.string.begin.sightly
      push:
        - meta_scope: string.quoted.single.sightly
        - match: "'"
          scope: punctuation.definition.string.end.sightly
          pop: true
        - match: \\.
          scope: constant.character.escape.sightly

  string-quoted-double:
    - match: '"'
      scope: punctuation.definition.string.begin.sightly
      push:
        - meta_scope: string.quoted.double.sightly
        - match: '"'
          scope: punctuation.definition.string.end.sightly
          pop: true
        - match: \\.
          scope: constant.character.escape.sightly

  propertyAccess:
    - match: '({{validVariable}})(\.?)({{validField}})'
      captures:
        1: variable.other.constant.sightly 
        2: punctuation.accessor.sightly keyword.operator.navigation.sightly
        3: variable.other.member.sightly meta.property.object.sightly meta.function-call.sightly

  booleans:
    - match: 'true|false'
      scope: constant.language.boolean.sightly  

  exprNode:
    - meta_content_scope: meta.exprNode.sightly
    # Each part of an expression

  optionList:
    - match: ([a-zA-Z_]+[a-zA-Z0-9_-]*)
                \s?(=)\s?
                  () # TODO: add 3rd capture for the optionValues
      captures:
        1: meta.option.key.sightly
        2: keyword.operator.assignment.sightly
    # Match on an `=` and the second piece is an `optionValues` section

  optionValues:
    - meta_content_scope: meta.optionList.optionValues.sightly
    # can include an `exprNode` or a `valueList`

  valueList:
    - meta_content_scope: meta.valueList.sightly
